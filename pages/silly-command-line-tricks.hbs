---
title: Silly Command Line Tricks
layout: main
---

{{> topbar }}

<section class="basic_text_wrapper">
    <h1>Silly Command Line Tricks</h1>
    <p>I get up to random things on the command line now and then. This is where I can document them for future reference.</p>
</section>

<section class="basic_text_wrapper">
    <h2>Commands</h2>
    <p>Here's an incomplete list of various command line tools I've used, to various ends.</p>

    <ul>
        <li>wget</li>
        <li>grep</li>
        <li>diff</li>
        <li>sort</li>
        <li>cut</li>
        <li>uniq</li>
        <li>sed</li>
        <li>awk</li>
        <li>wc</li>
        <li>find</li>
        <li>rename</li>
    </ul>

    <p>I'm not listing things like vim or git here, because I'm generally treating those as worlds unto themselves. On this page, I'm more interested in things that let me do work right on the command line that is either going to result in some output being put either directly in front of my eyes right then and there, or into an output file for later processing or reference.</p>

    <h2>A note about versions</h2>
    <p>I spend 99.9% of my time on a Mac, and a lot of these tools come pre-installed. That said, some things, I've found, don't. For those, I generally use <a href="https://brew.sh/">Homebrew</a>, which makes it pretty easy to install whatever else is missing.</p>
    <p>I also use Homebrew to address situations when the version of a tool that comes along with MacOS doesn't quite do the trick. Maybe the Mac version is weirdly outdated and doesn't do something I want it to, or there's some nuance of difference between a BSD version and a Gnu version that I don't care enough to have to mentally process every time I look something up on Stack Overflow. Sometimes installing a Gnu version via Homebrew results in a uniquely-prefixed version of the tool, like "gsed" or something like that. I just kind of stumble through these situations, because there's only so much I can keep in my head at a time, and there's probably something else I should be doing with my life at that moment.</p>
</section>

<section class="basic_text_wrapper">
    <h2>Things to document</h2>
    <p>Here's a bunch of things I've used; I should document how they work.</p>
</section>

<section class="basic_text_wrapper">
    <p>Grabbing a bunch of html and sticking it in a folder</p>
</section>

<section class="code-wrapper">
    <code><pre>
wget -E -r -l 0 --follow-tags=a --reject pdf,jpg,png {URL}</pre></code>
</section>

<section class="basic_text_wrapper">
    <p>Grabbing a bunch of html and sticking it in a folder, but using a specific list of urls loaded from a file.</p>
</section>

<section class="code-wrapper">
    <code><pre>
wget -pki ./urls.txt</pre></code>
</section>

<section class="basic_text_wrapper">
    <p>Yanking classes out of a folder full of html files, and storing the list in a file.</p>
</section>

<section class="code-wrapper">
    <code><pre>
grep -h -o -r -E -e class=\"\([a-zA-Z0-9\ _-]+\)\" | cut -f 2 -d \" | gsed 's/ /\n/g' | sort | uniq > ~/temp/output-file.txt</pre></code>
</section>

<section class="basic_text_wrapper">
    <p>Yanking classes out of a folder full of html files, but getting usage counts, instead.</p>
</section>

<section class="code-wrapper">
    <code><pre>
grep -h -o -r -E -e class=\"\([a-zA-Z0-9\ _-]+\)\" | cut -f 2 -d \" | gsed 's/ /\n/g' | sort | uniq -c | sort -n</pre></code>
</section>

<section class="basic_text_wrapper">
    <p>Yanking classes out of a css file, and storing the list in a file.</p>
</section>

<section class="code-wrapper">
    <code><pre>
grep --color -oP -e '(?<=\.)(-?[_a-zA-Z]+[_a-zA-Z0-9-]*)(?=[ .,])' ./file.css | sort | uniq > ~/temp/output-file.txt</pre></code>
</section>

<section class="basic_text_wrapper">
    <p>Renaming a collection of files, replacing all the spaces with underscores.</p>
</section>

<section class="code-wrapper">
    <code><pre>
find . -name "* *" -type f | rename 's/ /_/g'</pre></code>
</section>

<section class="basic_text_wrapper">
    <p>Getting the history of the number of lines in a file over history from a git repo. (<a href="https://namingthingsishard.blog/node/111">Reference</a>.)</p>
</section>

<section class="code-wrapper">
    <code><pre>
git log --shortstat --reverse --pretty=oneline ./app.css | grep '1 file changed' | awk -F',' '{if ($2 ~ /insertion/) {upholder = split($2, insertions, " "); up = insertions[1]} else {up = "0"}; if ($2 ~ /deletion/) {downholder = split($2, deletions, " "); down = deletions[1]} else if ($3 ~ /deletion/) {downholder = split($3, deletions, " "); down = deletions[1]} else {down = "0"}; total = total + up - down; print total;}'</pre></code>
</section>

<section class="basic_text_wrapper">
    <p>Given a directory in which there are many subdirectories with README files, get the files, extract the relevant piece of the directory path to use as a title, and then send everything out to a documentation file. This is cursed. There's surely a better way.</p>
</section>

<section class="code-wrapper">
    <code><pre>
find -s ./components/99-starters -type f -name README.md -exec bash -c "echo -n '## ' && echo {} | cut -d/ -f4" \; -a -exec cat {} \; -a -exec bash -c "echo -n {} | cut -d/ -f4 | sed 's/^...//' | awk '{print \"\n[Link](/components/detail/\"\$0\")\"}'" \; > docs/starters-list.md</pre></code>
</section>

<section class="basic_text_wrapper">
    <p>Appending the contents of one file to many, many other files.</p>
</section>

<section class="code-wrapper">
    <code><pre>
find ./dir/ -type f -name '*.ext' -exec bash -c 'cat ./append-me.txt > "$1"' -- {}  \;</pre></code>
</section>

{{> bottombar }}
